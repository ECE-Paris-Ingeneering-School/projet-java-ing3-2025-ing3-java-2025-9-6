import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.List;

public class HistoriqueCommandesFrame extends JFrame {
    private JTable commandesTable;
    private JTextArea detailsArea;
    private JTextArea noteArea;
    private JButton saveNoteButton;

    public HistoriqueCommandesFrame(int clientId) {
        setTitle("Historique de vos commandes");
        setSize(1000, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setResizable(false);

        // Image de fond
        ImageIcon backgroundImage = new ImageIcon("i.png");
        Image image = backgroundImage.getImage();
        Image scaledImage = image.getScaledInstance(getWidth(), getHeight(), Image.SCALE_SMOOTH);
        JLabel background = new JLabel(new ImageIcon(scaledImage));
        background.setLayout(new BorderLayout());
        setContentPane(background);

        JPanel mainPanel = new JPanel();
        mainPanel.setOpaque(false);
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 50, 20, 50));
        background.add(mainPanel, BorderLayout.CENTER);

        // Titre
        JLabel titre = new JLabel("Historique des Commandes", SwingConstants.CENTER);
        titre.setFont(new Font("Segoe UI", Font.BOLD, 32));
        titre.setForeground(new Color(30, 30, 30));
        titre.setAlignmentX(Component.CENTER_ALIGNMENT);
        mainPanel.add(titre);
        mainPanel.add(Box.createVerticalStrut(20));

        // Récupération des données
        CommandeDAO commandeDao = new CommandeDAO(Database.getConnection());
        List<Commande> commandes;
        try {
            commandes = commandeDao.getHistoriqueCommandes(clientId);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erreur lors du chargement des commandes", "Erreur", JOptionPane.ERROR_MESSAGE);
            commandes = List.of();
        }

        // Tableau des commandes
        String[] columnNames = {"ID", "Date", "Montant"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        for (Commande cmd : commandes) {
            Object[] row = {
                cmd.getId(),
                cmd.getDateCommande(),
                String.format("%.2f €", cmd.getMontantTotal())
            };
            model.addRow(row);
        }

        commandesTable = new JTable(model);
        commandesTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        commandesTable.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        commandesTable.setRowHeight(25);
        commandesTable.setBackground(Color.WHITE);
        commandesTable.setGridColor(new Color(200, 200, 200));

        JScrollPane tableScroll = new JScrollPane(commandesTable);
        tableScroll.setMaximumSize(new Dimension(900, 150));
        tableScroll.setAlignmentX(Component.CENTER_ALIGNMENT);
        mainPanel.add(tableScroll);
        mainPanel.add(Box.createVerticalStrut(20));

        // Détails de la commande
        JPanel detailsPanel = new JPanel();
        detailsPanel.setOpaque(false);
        detailsPanel.setLayout(new BoxLayout(detailsPanel, BoxLayout.Y_AXIS));
        detailsPanel.setBorder(BorderFactory.createTitledBorder(
            BorderFactory.createLineBorder(new Color(150, 200, 150),
            "Détails de la commande",
            TitledBorder.LEFT,
            TitledBorder.TOP,
            new Font("Segoe UI", Font.BOLD, 16),
            new Color(30, 30, 30))
        );
        detailsPanel.setMaximumSize(new Dimension(900, 200));
        detailsPanel.setAlignmentX(Component.CENTER_ALIGNMENT);

        detailsArea = new JTextArea();
        detailsArea.setEditable(false);
        detailsArea.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        detailsArea.setBackground(new Color(255, 255, 255, 200));
        detailsArea.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        JScrollPane detailsScroll = new JScrollPane(detailsArea);
        detailsPanel.add(detailsScroll);

        mainPanel.add(detailsPanel);
        mainPanel.add(Box.createVerticalStrut(15));

        // Note de commande
        JPanel notePanel = new JPanel();
        notePanel.setOpaque(false);
        notePanel.setLayout(new BoxLayout(notePanel, BoxLayout.Y_AXIS));
        notePanel.setBorder(BorderFactory.createTitledBorder(
            BorderFactory.createLineBorder(new Color(150, 200, 150)),
            "Notes",
            TitledBorder.LEFT,
            TitledBorder.TOP,
            new Font("Segoe UI", Font.BOLD, 16),
            new Color(30, 30, 30))
        );
        notePanel.setMaximumSize(new Dimension(900, 150));
        notePanel.setAlignmentX(Component.CENTER_ALIGNMENT);

        noteArea = new JTextArea(3, 20);
        noteArea.setLineWrap(true);
        noteArea.setWrapStyleWord(true);
        noteArea.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        noteArea.setBackground(new Color(255, 255, 255, 200));
        JScrollPane noteScroll = new JScrollPane(noteArea);
        notePanel.add(noteScroll);

        saveNoteButton = createButton("Enregistrer la note");
        notePanel.add(Box.createVerticalStrut(10));
        notePanel.add(saveNoteButton);

        mainPanel.add(notePanel);

        // Gestion des sélections
        commandesTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = commandesTable.getSelectedRow();
                if (selectedRow >= 0) {
                    Commande selectedCmd = commandes.get(selectedRow);
                    updateDetails(selectedCmd);
                }
            }
        });

        // Bouton Enregistrer
        saveNoteButton.addActionListener(e -> {
            int selectedRow = commandesTable.getSelectedRow();
            if (selectedRow >= 0) {
                try {
                    Commande selectedCmd = commandes.get(selectedRow);
                    selectedCmd.setNote(noteArea.getText());
                    commandeDao.ajouterNoteACommande(selectedCmd.getId(), noteArea.getText());
                    JOptionPane.showMessageDialog(this, "Note enregistrée avec succès !", "Succès", JOptionPane.INFORMATION_MESSAGE);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Erreur lors de l'enregistrement", "Erreur", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        // Afficher la première commande si elle existe
        if (!commandes.isEmpty()) {
            commandesTable.setRowSelectionInterval(0, 0);
        }
    }

    private JButton createButton(String text) {
        JButton button = new JButton(text);
        button.setAlignmentX(Component.CENTER_ALIGNMENT);
        button.setFont(new Font("Segoe UI", Font.BOLD, 14));
        button.setBackground(new Color(70, 130, 180));
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.setBorder(BorderFactory.createEmptyBorder(8, 20, 8, 20));

        button.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
                button.setBackground(new Color(60, 120, 170));
            }

            public void mouseExited(MouseEvent e) {
                button.setBackground(new Color(70, 130, 180));
            }
        });

        return button;
    }

    private void updateDetails(Commande commande) {
        StringBuilder details = new StringBuilder();
        details.append("Commande #").append(commande.getId()).append("\n");
        details.append("Date: ").append(commande.getDateCommande()).append("\n\n");
        details.append("Articles :\n");

        List<Article> articles = commande.getArticles();
        List<Integer> quantites = commande.getQuantites();
       
        for (int i = 0; i < articles.size(); i++) {
            Article article = articles.get(i);
            details.append(String.format(
                "- %s (Marque: %s) x%d → %.2f €\n",
                article.getNom(),
                article.getMarque(),
                quantites.get(i),
                article.getPrixUnitaire() * quantites.get(i)
            ));
        }

        details.append("\nTotal : ").append(String.format("%.2f €", commande.getMontantTotal()));
        detailsArea.setText(details.toString());

        noteArea.setText(commande.getNote() != null ? commande.getNote() : "");
    }

    public static void showForClient(int clientId) {
        SwingUtilities.invokeLater(() -> {
            HistoriqueCommandesFrame frame = new HistoriqueCommandesFrame(clientId);
            frame.setVisible(true);
        });
    }
}
