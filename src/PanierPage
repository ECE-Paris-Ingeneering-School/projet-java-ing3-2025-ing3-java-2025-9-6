package view;

import controller.PanierController;
import model.PanierItem;
import model.User;
import util.Session;

import javax.swing.*;
import java.awt.*;
import java.util.List;

public class PanierPage extends JFrame {
    private JPanel panierPanel; // Conteneur principal pour les articles du panier
    private List<PanierItem> panierItems; // Liste des articles dans le panier
    private double totalPanier = 0; // Total global du panier

    public PanierPage(List<PanierItem> panierItems) {
        this.panierItems = panierItems;

        // Configuration de base de la fen√™tre
        setTitle("Mon Panier");
        setSize(500, 400);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout()); // Layout principal de la fen√™tre

        // Cr√©ation d'un panel vertical pour afficher les articles
        panierPanel = new JPanel();
        panierPanel.setLayout(new BoxLayout(panierPanel, BoxLayout.Y_AXIS));

        // On met ce panel dans un JScrollPane pour permettre le scroll si beaucoup d‚Äôarticles
        add(new JScrollPane(panierPanel), BorderLayout.CENTER);

        // Chargement dynamique des articles
        loadPanierItems();

        // Bouton pour valider la commande
        JButton validerCommandeButton = new JButton("Valider la commande");
        validerCommandeButton.addActionListener(e -> {
            User user = Session.get(); // R√©cup√®re l‚Äôutilisateur actuellement connect√©
            // Envoie les donn√©es au contr√¥leur pour valider la commande
            if (PanierController.validerCommande(panierItems, user)) {
                dispose(); // Ferme cette fen√™tre
                // Lance la fen√™tre de paiement, avec un message √† la fin
                EcranPayement.lancerPaiement(() -> {
                    JOptionPane.showMessageDialog(null, "Commande confirm√©e et pay√©e !");
                });
            }
        });

        // Ajout du bouton en bas de la fen√™tre
        add(validerCommandeButton, BorderLayout.SOUTH);

        setVisible(true); // Affiche la fen√™tre
    }

    // Fonction qui met √† jour l‚Äôaffichage des articles du panier
    private void loadPanierItems() {
        totalPanier = 0; // R√©initialise le total
        panierPanel.removeAll(); // Vide le panel pour le recharger

        // Si le panier est vide
        if (panierItems.isEmpty()) {
            panierPanel.add(new JLabel("Votre panier est vide."));
        } else {
            // Pour chaque article du panier
            for (PanierItem item : panierItems) {
                double total = item.calculerPrixTotal(); // Prix total pour cet article
                totalPanier += total; // Ajout au total global

                // Texte affich√© pour chaque article
                String itemInfo = item.getNom() + " (PU: " + item.getPrixUnitaire() +
                        "‚Ç¨, Qt√©: " + item.getQuantite() + ") ‚ûú Total: " +
                        String.format("%.2f", total) + "‚Ç¨";
                panierPanel.add(new JLabel(itemInfo)); // Ajout du label dans le panel
            }

            panierPanel.add(Box.createVerticalStrut(10)); // Espacement
            // Affichage du total g√©n√©ral du panier
            panierPanel.add(new JLabel("üí∞ Total du panier: " + totalPanier + "‚Ç¨"));
        }

        panierPanel.revalidate(); // Met √† jour l'affichage
        panierPanel.repaint();    // Force le rafra√Æchissement visuel
    }
}
