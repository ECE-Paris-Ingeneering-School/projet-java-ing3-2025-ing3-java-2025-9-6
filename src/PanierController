package controller;

import model.PanierItem;
import model.User;
import dao.DatabaseConnection;

import javax.swing.*;
import java.sql.*;
import java.util.List;

public class PanierController {

    public static boolean validerCommande(List<PanierItem> panier, User user) {
        if (panier == null || panier.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Votre panier est vide !");
            return false;
        }

        if (user == null) {
            JOptionPane.showMessageDialog(null, "Aucun utilisateur connecté !");
            return false;
        }

        Connection conn = DatabaseConnection.getStaticConnection();
        if (conn == null) {
            JOptionPane.showMessageDialog(null, "Erreur de connexion à la base de données !");
            return false;
        }

        try {
            conn.setAutoCommit(false);

            double totalCommande = 0;
            for (PanierItem item : panier) {
                totalCommande += item.calculerPrixTotal();
            }

            String insertCommande = "INSERT INTO Commande (client_id, total) VALUES (?, ?)";
            int commandeId;

            try (PreparedStatement stmt = conn.prepareStatement(insertCommande, Statement.RETURN_GENERATED_KEYS)) {
                stmt.setInt(1, user.getId());
                stmt.setDouble(2, totalCommande);
                stmt.executeUpdate();
                ResultSet rs = stmt.getGeneratedKeys();
                if (rs.next()) {
                    commandeId = rs.getInt(1);
                } else {
                    throw new SQLException("Impossible de récupérer l'ID de la commande.");
                }
            }

            String insertCommandeArticle = "INSERT INTO Commande_Article (commande_id, article_id, quantite, prix_total) VALUES (?, ?, ?, ?)";
            try (PreparedStatement stmt = conn.prepareStatement(insertCommandeArticle)) {
                for (PanierItem item : panier) {
                    stmt.setInt(1, commandeId);
                    stmt.setInt(2, item.getArticleId());
                    stmt.setInt(3, item.getQuantite());
                    stmt.setDouble(4, item.calculerPrixTotal());
                    stmt.addBatch();
                }
                stmt.executeBatch();
            }

            String updateStats = "INSERT INTO Statistiques (article_id, ventes_totales, reductions_appliquees) " +
                    "VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE " +
                    "ventes_totales = ventes_totales + VALUES(ventes_totales), " +
                    "reductions_appliquees = reductions_appliquees + VALUES(reductions_appliquees)";
            try (PreparedStatement stmt = conn.prepareStatement(updateStats)) {
                for (PanierItem item : panier) {
                    int reductions = 0;
                    if (item.getQuantiteVrac() > 0 && item.getQuantite() >= item.getQuantiteVrac()) {
                        reductions = (item.getQuantite() / item.getQuantiteVrac()) * item.getQuantiteVrac();
                    }
                    stmt.setInt(1, item.getArticleId());
                    stmt.setInt(2, item.getQuantite());
                    stmt.setInt(3, reductions);
                    stmt.addBatch();
                }
                stmt.executeBatch();
            }

            conn.commit();
            panier.clear();
            JOptionPane.showMessageDialog(null, "Commande validée avec succès !");
            return true;
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException rollbackEx) {
                rollbackEx.printStackTrace();
            }
            JOptionPane.showMessageDialog(null, "Erreur lors de la validation de la commande : " + e.getMessage());
            return false;
        } finally {
            try {
                conn.setAutoCommit(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}
