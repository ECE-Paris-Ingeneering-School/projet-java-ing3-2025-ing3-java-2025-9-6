package dao;

import model.Commande;
import model.Article;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.time.LocalDate;

public class CommandeDAO implements ICommandeDAO {
    private Connection connection;

    public CommandeDAO(Connection connection) {
        this.connection = connection;
    }

    @Override
    public int getNombreCommandesDerniers3Mois(int clientId) {
        String sql = "SELECT COUNT(*) FROM Commande WHERE client_id = ? AND date_commande >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, clientId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }

    @Override
    public List<Commande> getCommandesByClientId(int clientId) {
        List<Commande> commandes = new ArrayList<>();
        String sql = "SELECT * FROM Commande WHERE client_id = ?";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, clientId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                int id = rs.getInt("id");
                java.util.Date dateCommande = rs.getDate("date_commande");
                // Pour simplifier, on assume que les articles sont récupérés d'une autre méthode
                List<Article> articles = new ArrayList<>(); // À remplacer par un appel à un autre DAO ou une méthode

                Commande commande = new Commande(id, clientId, dateCommande, articles);
                commandes.add(commande);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return commandes;
    }

    public int getNombreCommandesDepuis(int clientId, LocalDate since) {
        String sql = "SELECT COUNT(*) AS nbCommandes FROM Commande WHERE client_id = ? AND date_commande >= ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, clientId);
            stmt.setDate(2, java.sql.Date.valueOf(since));
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt("nbCommandes");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0;
    }
    //début des ajouts
    public List<Commande> getHistoriqueCommandes(int clientId) throws SQLException {
        List<Commande> commandes = new ArrayList<>();
       
        String sql = "SELECT c.id, c.date_commande, c.note, c.montant_total, c.statut, " +
                     "a.id as article_id, a.nom as article_nom, lc.quantite, a.prix " +
                     "FROM commande c " +
                     "JOIN ligne_commande lc ON c.id = lc.commande_id " +
                     "JOIN article a ON lc.article_id = a.id " +
                     "WHERE c.client_id = ? " +
                     "ORDER BY c.date_commande DESC";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, clientId);
            ResultSet rs = stmt.executeQuery();

            Map<Integer, Commande> commandesMap = new HashMap<>();
           
            while (rs.next()) {
                int commandeId = rs.getInt("id");
                Commande commande = commandesMap.get(commandeId);

                if (commande == null) {
                    commande = new Commande(
                        commandeId,
                        clientId,
                        rs.getTimestamp("date_commande").toLocalDateTime(),
                        new ArrayList<>(),
                        rs.getString("note"),
                        rs.getDouble("montant_total"),
                        StatutCommande.valueOf(rs.getString("statut"))
                    );
                    commandesMap.put(commandeId, commande);
                    commandes.add(commande);
                }

                LigneCommande ligne = new LigneCommande(
                    rs.getInt("article_id"),
                    rs.getString("article_nom"),
                    rs.getInt("quantite"),
                    rs.getDouble("prix")
                );
                commande.getLignes().add(ligne);
            }
        }
        return commandes;
    }

    public boolean ajouterNoteACommande(int commandeId, String note) throws SQLException {
        String sql = "UPDATE commande SET note = ? WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, note);
            stmt.setInt(2, commandeId);
            return stmt.executeUpdate() > 0;
        }
    }
}
